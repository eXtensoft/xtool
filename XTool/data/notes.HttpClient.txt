        private async void Execute02()
        {
            HttpClient client = new HttpClient();
            var response = await client.GetAsync("http://api.worldbank.org/countries?format=json");
            response.EnsureSuccessStatusCode(); // throws exception if not http200

            JArray content = await response.Content.ReadAsAsync<JArray>();
            dgrItems.ItemsSource = content;
        }

        private async void Execute01()
        {
            string url = "https://api.oneclickdigital.us/v1/";
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(url);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                var response = await client.GetAsync("countries");
                if (response.IsSuccessStatusCode)
                {
                    List<RB.API.Compact.Country> list = await response.Content.ReadAsAsync<List<RB.API.Compact.Country>>();
                    dgrItems.ItemsSource = list;
                }


                //var response = client.GetAsync("countries", HttpCompletionOption.ResponseContentRead);
                //if (response.Result.IsSuccessStatusCode)
                //{
                //    var q = response.Result.Content.ReadAsStringAsync();
                //    MessageBox.Show(q.Result);
                //}

            }
        }


        private async void DoSomething()
        {
            IEnumerable<RB.API.Compact.Country> list = await GetList<RB.API.Compact.Country>("https://api.oneclickdigital.us/v1/countries");
            HandleData(list);
        }

        private void HandleData(IEnumerable<RB.API.Compact.Country> list)
        {
            dgrItems.ItemsSource = list;
        }

        private async Task<IEnumerable<T>> GetList<T>(string url) where T : class, new()
        {
            var result = await GetListAsync<T>(url);
            return result;
        }


        private static async Task<IEnumerable<T>> GetListAsync<T>(string url) where T : class, new()
        {
            List<T> list = new List<T>();
            HttpClient client = new HttpClient();
            HttpResponseMessage response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                list = await response.Content.ReadAsAsync<List<T>>();
            }
            return list;
        }

    }